//
//  UtilTT.swift
//  iTeamTalk
//
//  Created by Bjørn Damstedt Rasmussen on 10/01/2021.
//  Copyright © 2021 BearWare.dk. All rights reserved.
//

import Foundation

protocol TeamTalkEvent : class {
    func handleTTMessage(_ m: TTMessage)
}

class TeamTalkEventHandler {
    weak var value : TeamTalkEvent?
    init (value: TeamTalkEvent) {
        self.value = value
    }
}

var ttMessageHandlers = [TeamTalkEventHandler]()

func addToTTMessages(_ p: TeamTalkEvent) {
    
    for m in ttMessageHandlers {
        if m.value === p {
            return
        }
    }
    
    let new = TeamTalkEventHandler(value: p)
    
    ttMessageHandlers.append(new)
}

func removeFromTTMessages(_ p: TeamTalkEventHandler) {

    var i = 0
    
    for m in ttMessageHandlers {
        if m === p {
            ttMessageHandlers.remove(at: i)
            break
        }
        else {
            i += 1
        }
    }
}

func isTransmitting(_ ttInst: UnsafeMutableRawPointer, stream: StreamType) -> Bool {
    let flags = TT_GetFlags(ttInst)
    
    switch stream {
    case STREAMTYPE_VOICE:
        if flags & CLIENT_TX_VOICE.rawValue != 0 {
            return true
        }
        if flags & CLIENT_SNDINPUT_VOICEACTIVATED.rawValue != 0 &&
            flags & CLIENT_SNDINPUT_VOICEACTIVE.rawValue != 0 {
                return true
        }
    default : break
    }
    return false
}

func getChannel(_ chan: Channel, strprop : CExt) -> String {
    return String(cString: withUnsafePointer(to: chan) { getChannelString(strprop, $0) })
}

func getUser(_ user: User, strprop : UExt) -> String {
    return String(cString: withUnsafePointer(to: user) { getUserString(strprop, $0) })
}

let TRUE : TTBOOL = 1
let FALSE : TTBOOL = 0

let DEFAULT_MSEC_PER_PACKET : INT32 = 40

let DEFAULT_AUDIOCODEC = OPUS_CODEC

//Default OPUS codec settings
let DEFAULT_OPUS_SAMPLERATE : INT32 = 48000
let DEFAULT_OPUS_CHANNELS : INT32 = 1
let DEFAULT_OPUS_APPLICATION : INT32 = OPUS_APPLICATION_VOIP
let DEFAULT_OPUS_COMPLEXITY : INT32 = 10
let DEFAULT_OPUS_FEC : TTBOOL = 1
let DEFAULT_OPUS_DTX : TTBOOL = 0
let DEFAULT_OPUS_VBR : TTBOOL = 1
let DEFAULT_OPUS_VBRCONSTRAINT : TTBOOL = 0
let DEFAULT_OPUS_BITRATE : INT32 = 32000
let DEFAULT_OPUS_DELAY : INT32 = DEFAULT_MSEC_PER_PACKET
let DEFAULT_OPUS_FRAMESIZE : INT32 = 0 // implies same as DEFAULT_OPUS_DELAY

//Default Speex codec settings
let DEFAULT_SPEEX_BANDMODE : INT32 = 1
let DEFAULT_SPEEX_QUALITY : INT32 = 4
let DEFAULT_SPEEX_DELAY : INT32 = DEFAULT_MSEC_PER_PACKET
let DEFAULT_SPEEX_SIMSTEREO : TTBOOL = 0

//Default Speex VBR codec settings
let DEFAULT_SPEEX_VBR_BANDMODE : INT32 = 1
let DEFAULT_SPEEX_VBR_QUALITY : INT32 = 4
let DEFAULT_SPEEX_VBR_BITRATE : INT32 = 0
let DEFAULT_SPEEX_VBR_MAXBITRATE : INT32 = 0
let DEFAULT_SPEEX_VBR_DTX : TTBOOL = 1
let DEFAULT_SPEEX_VBR_DELAY : INT32 = DEFAULT_MSEC_PER_PACKET
let DEFAULT_SPEEX_VBR_SIMSTEREO : TTBOOL = 0

func newAudioCodec(_ codec: Codec) -> iTeamTalk.AudioCodec {
    var audiocodec = AudioCodec()
    
    switch codec {
    case OPUS_CODEC :
        var opus = newOpusCodec()
        setOpusCodec(&audiocodec, &opus)
    case SPEEX_CODEC :
        var speex = newSpeexCodec()
        setSpeexCodec(&audiocodec, &speex)
    case SPEEX_VBR_CODEC :
        var speexvbr = newSpeexVBRCodec()
        setSpeexVBRCodec(&audiocodec, &speexvbr)
    case NO_CODEC :
        fallthrough
    default :
        break
    }
    return audiocodec
}

func newOpusCodec() -> OpusCodec {
    return OpusCodec(nSampleRate: DEFAULT_OPUS_SAMPLERATE,
        nChannels: DEFAULT_OPUS_CHANNELS, nApplication: DEFAULT_OPUS_APPLICATION,
        nComplexity: DEFAULT_OPUS_COMPLEXITY, bFEC: DEFAULT_OPUS_FEC,
        bDTX: DEFAULT_OPUS_DTX, nBitRate: DEFAULT_OPUS_BITRATE,
        bVBR: DEFAULT_OPUS_VBR, bVBRConstraint: DEFAULT_OPUS_VBRCONSTRAINT,
        nTxIntervalMSec: DEFAULT_MSEC_PER_PACKET, nFrameSizeMSec: DEFAULT_OPUS_FRAMESIZE)
}

func newSpeexCodec() -> SpeexCodec {
    return SpeexCodec(nBandmode: DEFAULT_SPEEX_BANDMODE, nQuality: DEFAULT_SPEEX_QUALITY, nTxIntervalMSec: DEFAULT_SPEEX_DELAY, bStereoPlayback: DEFAULT_SPEEX_SIMSTEREO)
}

func newSpeexVBRCodec() -> SpeexVBRCodec {
    return SpeexVBRCodec(nBandmode: DEFAULT_SPEEX_VBR_BANDMODE,
        nQuality: DEFAULT_SPEEX_VBR_QUALITY,
        nBitRate: DEFAULT_SPEEX_VBR_BITRATE,
        nMaxBitRate: DEFAULT_SPEEX_VBR_MAXBITRATE,
        bDTX: DEFAULT_SPEEX_VBR_DTX,
        nTxIntervalMSec: DEFAULT_SPEEX_VBR_DELAY,
        bStereoPlayback: DEFAULT_SPEEX_VBR_SIMSTEREO)
}

//TODO: someone find a way out of this madness
func fromTTString(_ cstring {
    var str = cs
    return withUnsafePointer(to: &str) {
        $0.withMemoryRebound(to: UInt8.self, capacity: MemoryLayout.size(ofValue: cs)) {
            String(cString: $0)
        }
    }
}

func toTTString(_ src: String, dst: inout{

    var c = StringWrap()
    convertTuple(src, &c)
    dst = c.buf
}
